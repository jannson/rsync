1、什么是rsync

rsync主要用于同步两个二进制文件。

2、rsync的原理

rsync的分为三个部分：

1）文件签名，即signature；

2）文件之间的差异，即delta；

3）根据文件之间的差异，将文件内容patch一致；

signature很简单，具体实现方法简要描述如下：

1）对文件按照blockLen分割，blockLen通常为2048字节；

2）对每个blockLen计算weak sum 和strong sum，weak sum使用rollsum 算法，计算结果为一个整形数字，strong sum算法通常为blake2或者md4，blake2的计算结果为32字节或64字节；

3）根据signature文件的格式，写入signature文件；

delta算法是rsync的核心，首先，delta的输入为signature文件和target文件，下面假设源文件为S，S的signature文件为SS，target文件为T，实现方法描述如下：

1）读取T文件的第一个block；

2）计算该block的weak sum，strong sum，在SS文件中的block中查找，如果找到相同的block，转3）；否则，转4）

3）读取下一个block，转2）

4）读取T文件的下一个字节，删除block的第一个字节，构成新的block，转2）

5）直到文件结束。

rollsum在这里的应用是，在第4）步转到第2）步的过程中，roll sum不需要对整个block重新计算，而只需要在rollsum中减去第一个字节，加上最后一个字节，以及一些的其他计算，即可得到新的weak sum，节省了很多计算量。

3、librsync

librsync是用C语言实现的rsync库，代码托管在github上： https://github.com/librsync/librsync ，目前版本是1.0。但在该版本的实现中，还是有很多地方需要进一步完善的。

librsync库主要实现了三个模块：

1）signature：生成文件签名，假设文件为A；

2）delta：根据文件A的签名，生成与另一个文件（假设为B）的差异，假设差异文件为D；

3）patch：根据2）的差异文件D，实现patch文件B，使得patch后的文件B与A的内容完全相同。

4、golang的rsync

这个是我目前正在进行的项目，使用golang语言重写librsync。

与librsync相比，有以下优势：

1）代码更易读。librsync的代码中，有一半都是在抽象、管理一个reader的东西，即把文件的内容读到一个buffer中，然后再从这个buffer中获取数据。得益于golang的io.Reader接口，这部分代码非常优雅；同时，librsync的delta，查找代码也非常晦涩。

2）对librsync的算法进行优化，主要是两个方面：

a、librsync查找相同的block是使用二分查找算法，我这里使用hash查找算法；当然，在实际的使用中，由于相同weak sum的block很少，这两者的性能差异应该很小；

b、librsync查找相同block时，没有考虑该block在文件B中的位置。考虑一种极限情况：

i、文件B的每一个字节都相同；

ii、对文件B做签名，得到B.sig；

iii、使用B.sig对文件B做delta，得到B.delta

此时，B.delta应该是全部匹配，但librsync没有考虑匹配的位置，导致B.delta文件的每一个block都是匹配到B的第一个block

代码目前还在进一步开发测试。
